{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Feedback.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.state = {\n      img: ''\n    };\n    this.renderDados = this.renderDados.bind(this);\n    this.renderFeedback = this.renderFeedback.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderDados();\n  }\n\n  renderDados() {\n    const {\n      email\n    } = this.props;\n    console.log(email);\n    const hash = md5(email).toString();\n    this.setState({\n      img: `https://www.gravatar.com/avatar/${hash}`\n    });\n  }\n\n  renderFeedback() {\n    const {\n      questionsCorrect\n    } = this.props;\n    console.log(questionsCorrect);\n    const media = 3;\n\n    if (questionsCorrect < media) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        \"data-testid\": \"feedback-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }\n      }, \"Could be better...\");\n    }\n\n    if (questionsCorrect === media) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        \"data-testid\": \"feedback-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }\n      }, \"Well Done!\");\n    }\n\n    if (questionsCorrect > media) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        \"data-testid\": \"feedback-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }\n      }, \"Well Done!\");\n    }\n  }\n\n  render() {\n    const {\n      img\n    } = this.state;\n    const {\n      name,\n      score\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      \"data-testid\": \"header-profile-picture\",\n      src: img,\n      alt: \"profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      \"data-testid\": \"header-player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, name), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"header-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, score), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, this.renderFeedback()));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  email: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n  questionsCorrect: state.player.questionsCorrect\n});\n\nexport default connect(mapStateToProps)(Feedback);\nFeedback.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.string.isRequired,\n  questionsCorrect: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Feedback.js"],"names":["React","Component","connect","PropTypes","md5","Feedback","constructor","state","img","renderDados","bind","renderFeedback","componentDidMount","email","props","console","log","hash","toString","setState","questionsCorrect","media","render","name","score","mapStateToProps","player","gravatarEmail","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.state = {\n      img: '',\n    };\n    this.renderDados = this.renderDados.bind(this);\n    this.renderFeedback = this.renderFeedback.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderDados();\n  }\n\n  renderDados() {\n    const { email } = this.props;\n    console.log(email);\n    const hash = md5(email).toString();\n    this.setState({ img: `https://www.gravatar.com/avatar/${hash}` });\n  }\n\n  renderFeedback() {\n    const { questionsCorrect } = this.props;\n    console.log(questionsCorrect);\n    const media = 3;\n    if (questionsCorrect < media) {\n      return (<p data-testid=\"feedback-text\">Could be better...</p>);\n    }\n    if (questionsCorrect === media) {\n      return (<p data-testid=\"feedback-text\">Well Done!</p>);\n    }\n    if (questionsCorrect > media) {\n      return (<p data-testid=\"feedback-text\">Well Done!</p>);\n    }\n  }\n\n  render() {\n    const { img } = this.state;\n    const { name, score } = this.props;\n    return (\n      <div>\n        <img data-testid=\"header-profile-picture\" src={ img } alt=\"profile\" />\n        <h1 data-testid=\"header-player-name\">{ name }</h1>\n        <p data-testid=\"header-score\">{ score }</p>\n        <div>{ this.renderFeedback() }</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n  questionsCorrect: state.player.questionsCorrect,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n\nFeedback.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.string.isRequired,\n  questionsCorrect: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}