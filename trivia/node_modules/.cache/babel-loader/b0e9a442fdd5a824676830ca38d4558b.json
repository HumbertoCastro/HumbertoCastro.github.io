{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Trivia.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport shuffle from '../services/shuffle';\nimport { fetchApi, updateIndex as update, updateButtons, updateScore as scoreUpdate } from '../actions/Index';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n    this.state = {\n      perguntas: '',\n      loading: true,\n      isButtonDisabled: true,\n      isColor: false,\n      tempoRestante: 30\n    };\n    this.request = this.request.bind(this);\n    this.keepResp = this.keepResp.bind(this);\n    this.secRequest = this.secRequest.bind(this);\n    this.renderPerguntas = this.renderPerguntas.bind(this);\n    this.respondeu = this.respondeu.bind(this);\n  }\n\n  componentDidMount() {\n    this.request();\n  }\n\n  componentDidUpdate() {\n    const {\n      index,\n      history,\n      settings\n    } = this.props;\n    const maxLength = settings.questions;\n\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n  }\n\n  respondeu() {\n    this.setState({\n      isButtonDisabled: true,\n      isColor: false\n    }, () => {\n      const {\n        updateIsRespDisabled\n      } = this.props;\n      updateIsRespDisabled();\n    });\n    const {\n      history,\n      index,\n      updateIndex,\n      settings\n    } = this.props;\n    const maxLength = settings.questions - 1;\n\n    if (index < maxLength) {\n      updateIndex();\n    } else {\n      const {\n        name,\n        score,\n        url\n      } = this.props;\n      const playerInfos = JSON.parse(localStorage.getItem('ranking')) ? JSON.parse(localStorage.getItem('ranking')) : [];\n      const matchData = {\n        name,\n        score,\n        url\n      };\n      playerInfos.push(matchData);\n      localStorage.setItem('ranking', JSON.stringify(playerInfos));\n      history.push('/feedback');\n    }\n  }\n\n  request() {\n    const {\n      settings\n    } = this.props;\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const {\n      category = defaulC,\n      difficulty = defaulD,\n      questions = defaultQ\n    } = settings;\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}&type=multiple&token=${token}`).then(r => r.json()).then(perguntas => {\n      const invalidateToken = 3;\n\n      if (perguntas.response_code === invalidateToken) {\n        this.secRequest();\n      } else {\n        this.setState({\n          perguntas,\n          loading: false\n        });\n      }\n    });\n  }\n\n  secRequest() {\n    const {\n      getToken,\n      settings\n    } = this.props;\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const {\n      category = defaulC,\n      difficulty = defaulD,\n      questions = defaultQ\n    } = settings;\n    getToken();\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}$type=multiple&token=${token}`).then(r => r.json()).then(perguntas => {\n      const invalidateToken = 3;\n\n      if (perguntas.response_code !== invalidateToken) {\n        this.setState({\n          perguntas,\n          loading: false\n        });\n      } else {\n        this.secRequest();\n      }\n    });\n  }\n\n  keepResp(_ref) {\n    let {\n      target\n    } = _ref;\n    const {\n      innerText: resposta\n    } = target;\n    const {\n      perguntas: {\n        results: perguntas\n      }\n    } = this.state;\n    const {\n      timer,\n      updateScore,\n      index\n    } = this.props;\n\n    if (perguntas[index].correct_answer === resposta) {\n      const {\n        tempoRestante\n      } = this.state;\n      let coeficiente = 0;\n      const TRES = 3;\n\n      switch (perguntas[index].dificulty) {\n        case 'easy':\n          coeficiente = 1;\n          break;\n\n        case 'medium':\n          coeficiente = 2;\n          break;\n\n        case 'hard':\n          coeficiente = TRES;\n          break;\n\n        default:\n          coeficiente = 1;\n      }\n\n      const NUMBER_TEN = 10;\n      const score = NUMBER_TEN + coeficiente * tempoRestante;\n      updateScore(score);\n    }\n\n    this.setState({\n      isColor: true,\n      isButtonDisabled: false,\n      tempoRestante: timer\n    }, () => {\n      const {\n        updateIsRespDisabled\n      } = this.props;\n      updateIsRespDisabled();\n    });\n  }\n\n  renderPerguntas() {\n    const {\n      isColor,\n      perguntas,\n      isButtonDisabled\n    } = this.state;\n    const {\n      index,\n      isRespDisabled\n    } = this.props;\n    const {\n      category,\n      dificulty,\n      question\n    } = perguntas.results[index];\n    const Alternativas = [perguntas.results[index].correct_answer, ...perguntas.results[index].incorrect_answers];\n    const perguntasRand = shuffle(Alternativas);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: dificulty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, perguntasRand.map((x, Index) => {\n      if (perguntas.results[index].correct_answer === x) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: isColor ? 'activeC' : 'desactive',\n          disabled: isRespDisabled,\n          onClick: this.keepResp,\n          type: \"button\",\n          key: Index,\n          \"data-testid\": \"correct-answer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }\n        }, x);\n      }\n\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: isColor ? 'activeW' : 'desactive',\n        disabled: isRespDisabled,\n        onClick: this.keepResp,\n        type: \"button\",\n        key: Index,\n        \"data-testid\": `wrong-answer${perguntasRand.length > 2 ? `-${Index}` : ''}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }\n      }, x);\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        display: isButtonDisabled ? 'none' : 'inline'\n      },\n      disabled: isButtonDisabled,\n      onClick: this.respondeu,\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, \"NEXT\")), /*#__PURE__*/React.createElement(Timer, {\n      isColor: isColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, loading ? null : this.renderPerguntas()));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getToken: () => dispatch(fetchApi()),\n  updateIndex: () => dispatch(update()),\n  updateIsRespDisabled: () => dispatch(updateButtons()),\n  updateScore: score => dispatch(scoreUpdate(score))\n});\n\nconst mapStateToProps = state => ({\n  index: state.player.index,\n  isRespDisabled: state.player.isRespDisabled,\n  timer: state.player.timer,\n  name: state.player.name,\n  score: state.player.score,\n  url: state.player.url,\n  settings: state.player.settings\n});\n\nTrivia.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  settings: PropTypes.shape({\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    questions: PropTypes.string\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  updateIndex: PropTypes.func.isRequired,\n  isRespDisabled: PropTypes.bool.isRequired,\n  updateIsRespDisabled: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);","map":{"version":3,"sources":["/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Trivia.js"],"names":["React","Component","connect","PropTypes","shuffle","fetchApi","updateIndex","update","updateButtons","updateScore","scoreUpdate","Header","Timer","Trivia","constructor","state","perguntas","loading","isButtonDisabled","isColor","tempoRestante","request","bind","keepResp","secRequest","renderPerguntas","respondeu","componentDidMount","componentDidUpdate","index","history","settings","props","maxLength","questions","push","setState","updateIsRespDisabled","name","score","url","playerInfos","JSON","parse","localStorage","getItem","matchData","setItem","stringify","defaulC","defaulD","defaultQ","category","difficulty","token","fetch","then","r","json","invalidateToken","response_code","getToken","target","innerText","resposta","results","timer","correct_answer","coeficiente","TRES","dificulty","NUMBER_TEN","isRespDisabled","question","Alternativas","incorrect_answers","perguntasRand","map","x","Index","length","display","render","mapDispatchToProps","dispatch","mapStateToProps","player","propTypes","func","isRequired","shape","string","number","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport shuffle from '../services/shuffle';\nimport { fetchApi,\n  updateIndex as update,\n  updateButtons,\n  updateScore as scoreUpdate } from '../actions/Index';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n    this.state = {\n      perguntas: '',\n      loading: true,\n      isButtonDisabled: true,\n      isColor: false,\n      tempoRestante: 30,\n    };\n    this.request = this.request.bind(this);\n    this.keepResp = this.keepResp.bind(this);\n    this.secRequest = this.secRequest.bind(this);\n    this.renderPerguntas = this.renderPerguntas.bind(this);\n    this.respondeu = this.respondeu.bind(this);\n  }\n\n  componentDidMount() {\n    this.request();\n  }\n\n  componentDidUpdate() {\n    const { index, history, settings } = this.props;\n    const maxLength = settings.questions;\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n  }\n\n  respondeu() {\n    this.setState({ isButtonDisabled: true, isColor: false }, () => {\n      const { updateIsRespDisabled } = this.props;\n      updateIsRespDisabled();\n    });\n\n    const { history, index, updateIndex, settings } = this.props;\n\n    const maxLength = settings.questions - 1;\n    if (index < maxLength) {\n      updateIndex();\n    } else {\n      const { name, score, url } = this.props;\n      const playerInfos = JSON.parse(localStorage.getItem('ranking'))\n        ? JSON.parse(localStorage.getItem('ranking')) : [];\n      const matchData = {\n        name, score, url,\n      };\n      playerInfos.push(matchData);\n      localStorage.setItem('ranking', JSON.stringify(playerInfos));\n      history.push('/feedback');\n    }\n  }\n\n  request() {\n    const { settings } = this.props;\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const { category = defaulC, difficulty = defaulD, questions = defaultQ } = settings;\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}&type=multiple&token=${token}`)\n      .then((r) => r.json()).then((perguntas) => {\n        const invalidateToken = 3;\n        if (perguntas.response_code === invalidateToken) {\n          this.secRequest();\n        } else {\n          this.setState({ perguntas, loading: false });\n        }\n      });\n  }\n\n  secRequest() {\n    const { getToken, settings } = this.props;\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const { category = defaulC, difficulty = defaulD, questions = defaultQ } = settings;\n    getToken();\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}$type=multiple&token=${token}`)\n      .then((r) => r.json()).then((perguntas) => {\n        const invalidateToken = 3;\n        if (perguntas.response_code !== invalidateToken) {\n          this.setState({ perguntas, loading: false });\n        } else {\n          this.secRequest();\n        }\n      });\n  }\n\n  keepResp({ target }) {\n    const { innerText: resposta } = target;\n    const { perguntas: { results: perguntas } } = this.state;\n    const { timer, updateScore, index } = this.props;\n    if (perguntas[index].correct_answer === resposta) {\n      const { tempoRestante } = this.state;\n      let coeficiente = 0;\n      const TRES = 3;\n      switch (perguntas[index].dificulty) {\n      case 'easy': coeficiente = 1;\n        break;\n      case 'medium': coeficiente = 2;\n        break;\n      case 'hard': coeficiente = TRES;\n        break;\n      default: coeficiente = 1;\n      }\n      const NUMBER_TEN = 10;\n      const score = NUMBER_TEN + (coeficiente * tempoRestante);\n      updateScore(score);\n    }\n    this.setState({ isColor: true,\n      isButtonDisabled: false,\n      tempoRestante: timer }, () => {\n      const { updateIsRespDisabled } = this.props;\n      updateIsRespDisabled();\n    });\n  }\n\n  renderPerguntas() {\n    const { isColor,\n      perguntas,\n      isButtonDisabled,\n    } = this.state;\n    const { index, isRespDisabled } = this.props;\n    const {\n      category,\n      dificulty,\n      question,\n    } = perguntas.results[index];\n    const Alternativas = [perguntas.results[index].correct_answer,\n      ...perguntas.results[index].incorrect_answers];\n    const perguntasRand = shuffle(Alternativas);\n    return (\n      <div key={ dificulty }>\n        <p data-testid=\"question-category\">{ category }</p>\n        <p data-testid=\"question-text\">{ question }</p>\n        <div data-testid=\"answer-options\">\n          {perguntasRand.map((x, Index) => {\n            if (perguntas.results[index].correct_answer === x) {\n              return (\n                <button\n                  className={ isColor ? 'activeC' : 'desactive' }\n                  disabled={ isRespDisabled }\n                  onClick={ this.keepResp }\n                  type=\"button\"\n                  key={ Index }\n                  data-testid=\"correct-answer\"\n                >\n                  { x }\n                </button>);\n            }\n            return (\n              <button\n                className={ isColor ? 'activeW' : 'desactive' }\n                disabled={ isRespDisabled }\n                onClick={ this.keepResp }\n                type=\"button\"\n                key={ Index }\n                data-testid={ `wrong-answer${perguntasRand\n                  .length > 2 ? `-${Index}` : ''}` }\n              >\n                { x }\n              </button>);\n          })}\n          <button\n            style={ { display: isButtonDisabled ? 'none' : 'inline' } }\n            disabled={ isButtonDisabled }\n            onClick={ this.respondeu }\n            type=\"button\"\n            data-testid=\"btn-next\"\n          >\n            NEXT\n          </button>\n        </div>\n        <Timer isColor={ isColor } />\n      </div>\n    );\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div>\n        <Header />\n        <div>{ loading ? null : this.renderPerguntas() }</div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchApi()),\n  updateIndex: () => dispatch(update()),\n  updateIsRespDisabled: () => dispatch(updateButtons()),\n  updateScore: (score) => dispatch(scoreUpdate(score)),\n});\n\nconst mapStateToProps = (state) => ({\n  index: state.player.index,\n  isRespDisabled: state.player.isRespDisabled,\n  timer: state.player.timer,\n  name: state.player.name,\n  score: state.player.score,\n  url: state.player.url,\n  settings: state.player.settings,\n});\n\nTrivia.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  settings: PropTypes.shape({\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    questions: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  updateIndex: PropTypes.func.isRequired,\n  isRespDisabled: PropTypes.bool.isRequired,\n  updateIsRespDisabled: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n"]},"metadata":{},"sourceType":"module"}