{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Login.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { SaveData } from '../actions/Index';\nimport fetchToken from '../services/Api';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      const {\n        value,\n        type\n      } = e.target;\n\n      if (type === 'text') {\n        this.setState({\n          name: value\n        }, () => {\n          this.ValidateTest();\n        });\n      } else {\n        this.setState({\n          email: value\n        }, () => {\n          this.ValidateTest();\n        });\n      }\n    };\n\n    this.ValidateTest = () => {\n      const {\n        email,\n        name\n      } = this.state;\n      const minLength = 1;\n      const re = /\\S+@\\S+\\.\\S+/; // refer = https://www.horadecodar.com.br/2020/09/07/expressao-regular-para-validar-e-mail-javascript-regex/\n\n      if (name.length >= minLength && re.test(email)) {\n        this.setState({\n          isButtonDisabled: false\n        });\n      } else {\n        this.setState({\n          isButtonDisabled: true\n        });\n      }\n    };\n\n    this.state = {\n      email: '',\n      name: '',\n      isButtonDisabled: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.submit = this.submit.bind(this);\n  }\n\n  submit() {\n    const {\n      getToken,\n      history\n    } = this.props;\n    const {\n      email,\n      name\n    } = this.state;\n    const data = {\n      gravatarEmail: email,\n      name\n    };\n    salvarData(data);\n    getToken();\n    history.push('/trivia');\n  }\n\n  render() {\n    const {\n      email,\n      name,\n      isButtonDisabled\n    } = this.state;\n    const {\n      history\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"page-login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"Email do Gravator:\"), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      \"data-testid\": \"input-gravatar-email\",\n      name: \"email\",\n      value: email,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"Nome do Jogador:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"input-player-name\",\n      name: \"text\",\n      value: name,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"btn-play\",\n      type: \"button\",\n      disabled: isButtonDisabled,\n      onClick: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, \"JOGAR!\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      onClick: () => {\n        history.push('/settings');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"Configura\\xE7oes\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getToken: () => dispatch(fetchToken()),\n  salvarData: data => dispatch(SaveData(data))\n});\n\nconst mapStateToProps = state => ({\n  tokenFetched: state.token.token\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  getToken: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Login.js"],"names":["React","PropTypes","connect","SaveData","fetchToken","Login","Component","constructor","handleChange","e","value","type","target","setState","name","ValidateTest","email","state","minLength","re","length","test","isButtonDisabled","bind","submit","getToken","history","props","data","gravatarEmail","salvarData","push","render","mapDispatchToProps","dispatch","mapStateToProps","tokenFetched","token","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { SaveData } from '../actions/Index';\nimport fetchToken from '../services/Api';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      name: '',\n      isButtonDisabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.submit = this.submit.bind(this);\n  }\n\n  handleChange = (e) => {\n    const { value, type } = e.target;\n    if (type === 'text') {\n      this.setState({ name: value }, () => {\n        this.ValidateTest();\n      });\n    } else {\n      this.setState({ email: value }, () => {\n        this.ValidateTest();\n      });\n    }\n  };\n\n  ValidateTest = () => {\n    const { email, name } = this.state;\n    const minLength = 1;\n    const re = /\\S+@\\S+\\.\\S+/;\n    // refer = https://www.horadecodar.com.br/2020/09/07/expressao-regular-para-validar-e-mail-javascript-regex/\n    if (name.length >= minLength && re.test(email)) {\n      this.setState({ isButtonDisabled: false });\n    } else {\n      this.setState({ isButtonDisabled: true });\n    }\n  };\n\n  submit() {\n    const { getToken, history } = this.props;\n    const { email, name } = this.state;\n    const data = {\n      gravatarEmail: email,\n      name,\n    };\n    salvarData(data);\n    getToken();\n    history.push('/trivia');\n  }\n\n  render() {\n    const { email, name, isButtonDisabled } = this.state;\n    const { history } = this.props;\n\n    return (\n      <div data-testid=\"page-login\">\n        <h1>Email do Gravator:</h1>\n        <form>\n          <input\n            type=\"email\"\n            data-testid=\"input-gravatar-email\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n          <h2>Nome do Jogador:</h2>\n          <input\n            type=\"text\"\n            data-testid=\"input-player-name\"\n            name=\"text\"\n            value={ name }\n            onChange={ this.handleChange }\n          />\n          <button\n            data-testid=\"btn-play\"\n            type=\"button\"\n            disabled={ isButtonDisabled }\n            onClick={ this.submit }\n          >\n            JOGAR!\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ () => {\n              history.push('/settings');\n            } }\n          >\n            Configuraçoes\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchToken()),\n  salvarData: (data) => dispatch(SaveData(data)),\n});\n\nconst mapStateToProps = (state) => ({\n  tokenFetched: state.token.token,\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  getToken: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}