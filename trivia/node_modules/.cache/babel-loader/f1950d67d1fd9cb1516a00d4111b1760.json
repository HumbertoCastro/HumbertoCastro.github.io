{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Trivia.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport shuffle from '../services/shuffle';\nimport { fetchApi } from '../actions/Index';\nimport Header from '../components/Header';\nimport './Trivia.css';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n    this.state = {\n      perguntas: '',\n      loading: true,\n      index: 0,\n      isButtonDisabled: true,\n      isRespDisabled: false,\n      isColor: false\n    };\n    this.request = this.request.bind(this);\n    this.keepResp = this.keepResp.bind(this);\n    this.secRequest = this.secRequest.bind(this);\n    this.renderPerguntas = this.renderPerguntas.bind(this);\n    this.respondeu = this.respondeu.bind(this);\n  }\n\n  componentDidMount() {\n    this.request();\n  }\n\n  respondeu(_ref) {\n    let {\n      target\n    } = _ref;\n    this.setState({\n      isRespDisabled: false,\n      isButtonDisabled: true,\n      isColor: false\n    });\n    const resposta = target.innerHTML;\n    const {\n      history\n    } = this.props;\n    const {\n      perguntas,\n      index\n    } = this.state;\n    const maxLength = 4;\n\n    if (perguntas.results.some(x => x.correct_answer === resposta)) {\n      // AQUI Ã‰ ONDE VC IMPLEMENTA O CODIGO DE RESPOSTA CERTA\n      console.log('dd');\n    }\n\n    if (index < maxLength) {\n      this.setState(prev => this.setState({\n        index: prev.index + 1\n      }));\n    } else {\n      history.push('/feedback');\n    }\n  }\n\n  request() {\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=5&token=${token}`).then(r => r.json()).then(perguntas => {\n      const invalidateToken = 3;\n\n      if (perguntas.response_code === invalidateToken) {\n        this.secRequest();\n      } else {\n        console.log(perguntas);\n        this.setState({\n          perguntas,\n          loading: false\n        });\n      }\n    });\n  }\n\n  secRequest() {\n    const {\n      getToken\n    } = this.props;\n    getToken();\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=5&token=${token}`).then(r => r.json()).then(perguntas => {\n      const invalidateToken = 3;\n\n      if (perguntas.response_code !== invalidateToken) {\n        this.setState({\n          perguntas,\n          loading: false\n        });\n      } else {\n        this.secRequest();\n      }\n    });\n  }\n\n  keepResp() {\n    this.setState({\n      isColor: true,\n      isRespDisabled: true,\n      isButtonDisabled: false\n    });\n  }\n\n  renderPerguntas() {\n    const {\n      isColor,\n      perguntas,\n      index,\n      isButtonDisabled,\n      isRespDisabled\n    } = this.state;\n    const {\n      category,\n      dificulty,\n      question\n    } = perguntas.results[index];\n    const Alternativas = [perguntas.results[index].correct_answer, ...perguntas.results[index].incorrect_answers];\n    const perguntasRand = shuffle(Alternativas);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: dificulty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, perguntasRand.map((x, Index) => {\n      if (perguntas.results[index].correct_answer === x) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: isColor ? 'activeC' : 'desactive',\n          disabled: isRespDisabled,\n          onClick: this.keepResp,\n          type: \"button\",\n          key: Index,\n          \"data-testid\": \"correct-answer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }\n        }, x);\n      }\n\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: isColor ? 'activeW' : 'desactive',\n        disabled: isRespDisabled,\n        onClick: this.keepResp,\n        type: \"button\",\n        key: Index,\n        \"data-testid\": `wrong-answer-${Index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }, x);\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: isButtonDisabled,\n      onClick: this.respondeu,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"NEXT\")));\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, loading ? null : this.renderPerguntas()));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getToken: () => dispatch(fetchApi())\n});\n\nTrivia.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired\n};\nexport default connect(null, mapDispatchToProps)(Trivia);","map":{"version":3,"sources":["/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Trivia.js"],"names":["React","Component","connect","PropTypes","shuffle","fetchApi","Header","Trivia","constructor","state","perguntas","loading","index","isButtonDisabled","isRespDisabled","isColor","request","bind","keepResp","secRequest","renderPerguntas","respondeu","componentDidMount","target","setState","resposta","innerHTML","history","props","maxLength","results","some","x","correct_answer","console","log","prev","push","token","localStorage","getItem","fetch","then","r","json","invalidateToken","response_code","getToken","category","dificulty","question","Alternativas","incorrect_answers","perguntasRand","map","Index","render","mapDispatchToProps","dispatch","propTypes","func","isRequired","shape"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport shuffle from '../services/shuffle';\nimport { fetchApi } from '../actions/Index';\nimport Header from '../components/Header';\nimport './Trivia.css';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n    this.state = {\n      perguntas: '',\n      loading: true,\n      index: 0,\n      isButtonDisabled: true,\n      isRespDisabled: false,\n      isColor: false,\n    };\n    this.request = this.request.bind(this);\n    this.keepResp = this.keepResp.bind(this);\n    this.secRequest = this.secRequest.bind(this);\n    this.renderPerguntas = this.renderPerguntas.bind(this);\n    this.respondeu = this.respondeu.bind(this);\n  }\n\n  componentDidMount() {\n    this.request();\n  }\n\n  respondeu({ target }) {\n    this.setState({ isRespDisabled: false, isButtonDisabled: true, isColor: false });\n    const resposta = target.innerHTML;\n    const { history } = this.props;\n    const { perguntas, index } = this.state;\n    const maxLength = 4;\n    if (perguntas.results.some((x) => x.correct_answer === resposta)) {\n      // AQUI Ã‰ ONDE VC IMPLEMENTA O CODIGO DE RESPOSTA CERTA\n      console.log('dd');\n    }\n\n    if (index < maxLength) {\n      this.setState((prev) => this.setState({ index: prev.index + 1 }));\n    } else {\n      history.push('/feedback');\n    }\n  }\n\n  request() {\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)\n      .then((r) => r.json()).then((perguntas) => {\n        const invalidateToken = 3;\n        if (perguntas.response_code === invalidateToken) {\n          this.secRequest();\n        } else {\n          console.log(perguntas);\n          this.setState({ perguntas, loading: false });\n        }\n      });\n  }\n\n  secRequest() {\n    const { getToken } = this.props;\n    getToken();\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)\n      .then((r) => r.json()).then((perguntas) => {\n        const invalidateToken = 3;\n        if (perguntas.response_code !== invalidateToken) {\n          this.setState({ perguntas, loading: false });\n        } else {\n          this.secRequest();\n        }\n      });\n  }\n\n  keepResp() {\n    this.setState({ isColor: true, isRespDisabled: true, isButtonDisabled: false });\n  }\n\n  renderPerguntas() {\n    const { isColor, perguntas, index, isButtonDisabled, isRespDisabled } = this.state;\n    const {\n      category,\n      dificulty,\n      question,\n    } = perguntas.results[index];\n    const Alternativas = [perguntas.results[index].correct_answer,\n      ...perguntas.results[index].incorrect_answers];\n    const perguntasRand = shuffle(Alternativas);\n    return (\n      <div key={ dificulty }>\n        <p data-testid=\"question-category\">{ category }</p>\n        <p data-testid=\"question-text\">{ question }</p>\n        <div data-testid=\"answer-options\">\n          {perguntasRand.map((x, Index) => {\n            if (perguntas.results[index].correct_answer === x) {\n              return (\n                <button\n                  className={ isColor ? 'activeC' : 'desactive' }\n                  disabled={ isRespDisabled }\n                  onClick={ this.keepResp }\n                  type=\"button\"\n                  key={ Index }\n                  data-testid=\"correct-answer\"\n                >\n                  { x }\n                </button>);\n            }\n            return (\n              <button\n                className={ isColor ? 'activeW' : 'desactive' }\n                disabled={ isRespDisabled }\n                onClick={ this.keepResp }\n                type=\"button\"\n                key={ Index }\n                data-testid={ `wrong-answer-${Index}` }\n              >\n                { x }\n              </button>);\n          })}\n          <button\n            disabled={ isButtonDisabled }\n            onClick={ this.respondeu }\n            type=\"button\"\n          >\n            NEXT\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div>\n        <Header />\n        <div>{ loading ? null : this.renderPerguntas() }</div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchApi()),\n});\n\nTrivia.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Trivia);\n"]},"metadata":{},"sourceType":"module"}