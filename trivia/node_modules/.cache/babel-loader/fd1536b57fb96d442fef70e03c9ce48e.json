{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Trivia.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport shuffle from '../services/shuffle';\nimport { fetchApi, updateIndex as update, updateButtons, updateScore as scoreUpdate } from '../actions/Index';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport Settings from './Settings';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n    this.state = {\n      perguntas: '',\n      loading: true,\n      isButtonDisabled: true,\n      isColor: false,\n      tempoRestante: 30\n    };\n    this.request = this.request.bind(this);\n    this.keepResp = this.keepResp.bind(this);\n    this.secRequest = this.secRequest.bind(this);\n    this.renderPerguntas = this.renderPerguntas.bind(this);\n    this.respondeu = this.respondeu.bind(this);\n  }\n\n  componentDidMount() {\n    this.request();\n  }\n\n  componentDidUpdate() {\n    const {\n      index,\n      history\n    } = this.props;\n    const maxLength = 5;\n\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n  }\n\n  respondeu() {\n    this.setState({\n      isButtonDisabled: true,\n      isColor: false\n    }, () => {\n      const {\n        updateIsRespDisabled\n      } = this.props;\n      updateIsRespDisabled();\n    });\n    const {\n      history,\n      index,\n      updateIndex\n    } = this.props;\n    const maxLength = 4;\n\n    if (index < maxLength) {\n      updateIndex();\n    } else {\n      const {\n        name,\n        score,\n        url\n      } = this.props;\n      const playerInfos = JSON.parse(localStorage.getItem('ranking')) ? JSON.parse(localStorage.getItem('ranking')) : [];\n      console.log(playerInfos);\n      const matchData = {\n        name,\n        score,\n        url\n      };\n      playerInfos.push(matchData);\n      console.log(playerInfos);\n      localStorage.setItem('ranking', JSON.stringify(playerInfos));\n      history.push('/feedback');\n    }\n  }\n\n  request() {\n    const {\n      settings\n    } = this.props;\n    console.log(Settings);\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const {\n      category = defaulC,\n      difficulty = defaulD,\n      questions = defaultQ\n    } = settings;\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}&token=${token}`).then(r => r.json()).then(perguntas => {\n      console.log(perguntas);\n      const invalidateToken = 3;\n\n      if (perguntas.response_code === invalidateToken) {\n        this.secRequest();\n      } else {\n        // console.log(perguntas);\n        this.setState({\n          perguntas,\n          loading: false\n        });\n      }\n    });\n  }\n\n  secRequest() {\n    const {\n      getToken,\n      settings\n    } = this.props;\n    console.log(Settings);\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const {\n      category = defaulC,\n      difficulty = defaulD,\n      questions = defaultQ\n    } = settings;\n    getToken();\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}&token=${token}`).then(r => r.json()).then(perguntas => {\n      const invalidateToken = 3;\n\n      if (perguntas.response_code !== invalidateToken) {\n        this.setState({\n          perguntas,\n          loading: false\n        });\n      } else {\n        this.secRequest();\n      }\n    });\n  }\n\n  keepResp(_ref) {\n    let {\n      target\n    } = _ref;\n    const {\n      innerText: resposta\n    } = target;\n    const {\n      perguntas: {\n        results: perguntas\n      }\n    } = this.state;\n    const {\n      timer,\n      updateScore,\n      index\n    } = this.props;\n\n    if (perguntas[index].correct_answer === resposta) {\n      const {\n        tempoRestante\n      } = this.state;\n      console.log('input', resposta);\n      console.log('object', perguntas[index].correct_answer);\n      let coeficiente = 0;\n      const TRES = 3;\n\n      switch (perguntas[index].dificulty) {\n        case 'easy':\n          coeficiente = 1;\n          break;\n\n        case 'medium':\n          coeficiente = 2;\n          break;\n\n        case 'hard':\n          coeficiente = TRES;\n          break;\n\n        default:\n          coeficiente = 1;\n      }\n\n      const NUMBER_TEN = 10;\n      const score = NUMBER_TEN + coeficiente * tempoRestante;\n      console.log(score);\n      updateScore(score);\n    }\n\n    this.setState({\n      isColor: true,\n      isButtonDisabled: false,\n      tempoRestante: timer\n    }, () => {\n      const {\n        updateIsRespDisabled\n      } = this.props;\n      updateIsRespDisabled();\n    });\n  }\n\n  renderPerguntas() {\n    const {\n      isColor,\n      perguntas,\n      isButtonDisabled\n    } = this.state;\n    const {\n      index,\n      isRespDisabled\n    } = this.props;\n    const {\n      category,\n      dificulty,\n      question\n    } = perguntas.results[index];\n    const Alternativas = [perguntas.results[index].correct_answer, ...perguntas.results[index].incorrect_answers];\n    const perguntasRand = shuffle(Alternativas);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: dificulty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, perguntasRand.map((x, Index) => {\n      if (perguntas.results[index].correct_answer === x) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: isColor ? 'activeC' : 'desactive',\n          disabled: isRespDisabled,\n          onClick: this.keepResp,\n          type: \"button\",\n          key: Index,\n          \"data-testid\": \"correct-answer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }\n        }, x);\n      }\n\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: isColor ? 'activeW' : 'desactive',\n        disabled: isRespDisabled,\n        onClick: this.keepResp,\n        type: \"button\",\n        key: Index,\n        \"data-testid\": `wrong-answer${perguntasRand.length > 2 ? `-${Index}` : ''}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }\n      }, x);\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        display: isButtonDisabled ? 'none' : 'inline'\n      },\n      disabled: isButtonDisabled,\n      onClick: this.respondeu,\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, \"NEXT\")), /*#__PURE__*/React.createElement(Timer, {\n      isColor: isColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, loading ? null : this.renderPerguntas()));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getToken: () => dispatch(fetchApi()),\n  updateIndex: () => dispatch(update()),\n  updateIsRespDisabled: () => dispatch(updateButtons()),\n  updateScore: score => dispatch(scoreUpdate(score))\n});\n\nconst mapStateToProps = state => ({\n  index: state.player.index,\n  isRespDisabled: state.player.isRespDisabled,\n  timer: state.player.timer,\n  name: state.player.name,\n  score: state.player.score,\n  url: state.player.url,\n  settings: state.player.settings\n});\n\nTrivia.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  settings: PropTypes.shape({\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    questions: PropTypes.string\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  updateIndex: PropTypes.func.isRequired,\n  isRespDisabled: PropTypes.bool.isRequired,\n  updateIsRespDisabled: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);","map":{"version":3,"sources":["/home/humberto/Projetos/sd-016-a-project-trivia-react-redux/src/pages/Trivia.js"],"names":["React","Component","connect","PropTypes","shuffle","fetchApi","updateIndex","update","updateButtons","updateScore","scoreUpdate","Header","Timer","Settings","Trivia","constructor","state","perguntas","loading","isButtonDisabled","isColor","tempoRestante","request","bind","keepResp","secRequest","renderPerguntas","respondeu","componentDidMount","componentDidUpdate","index","history","props","maxLength","push","setState","updateIsRespDisabled","name","score","url","playerInfos","JSON","parse","localStorage","getItem","console","log","matchData","setItem","stringify","settings","defaulC","defaulD","defaultQ","category","difficulty","questions","token","fetch","then","r","json","invalidateToken","response_code","getToken","target","innerText","resposta","results","timer","correct_answer","coeficiente","TRES","dificulty","NUMBER_TEN","isRespDisabled","question","Alternativas","incorrect_answers","perguntasRand","map","x","Index","length","display","render","mapDispatchToProps","dispatch","mapStateToProps","player","propTypes","func","isRequired","shape","string","number","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport shuffle from '../services/shuffle';\nimport { fetchApi,\n  updateIndex as update,\n  updateButtons,\n  updateScore as scoreUpdate } from '../actions/Index';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport Settings from './Settings';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n    this.state = {\n      perguntas: '',\n      loading: true,\n      isButtonDisabled: true,\n      isColor: false,\n      tempoRestante: 30,\n    };\n    this.request = this.request.bind(this);\n    this.keepResp = this.keepResp.bind(this);\n    this.secRequest = this.secRequest.bind(this);\n    this.renderPerguntas = this.renderPerguntas.bind(this);\n    this.respondeu = this.respondeu.bind(this);\n  }\n\n  componentDidMount() {\n    this.request();\n  }\n\n  componentDidUpdate() {\n    const { index, history } = this.props;\n    const maxLength = 5;\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n  }\n\n  respondeu() {\n    this.setState({ isButtonDisabled: true, isColor: false }, () => {\n      const { updateIsRespDisabled } = this.props;\n      updateIsRespDisabled();\n    });\n\n    const { history, index, updateIndex } = this.props;\n\n    const maxLength = 4;\n    if (index < maxLength) {\n      updateIndex();\n    } else {\n      const { name, score, url } = this.props;\n      const playerInfos = JSON.parse(localStorage.getItem('ranking'))\n        ? JSON.parse(localStorage.getItem('ranking')) : [];\n      console.log(playerInfos);\n      const matchData = {\n        name, score, url,\n      };\n      playerInfos.push(matchData);\n      console.log(playerInfos);\n      localStorage.setItem('ranking', JSON.stringify(playerInfos));\n      history.push('/feedback');\n    }\n  }\n\n  request() {\n    const { settings } = this.props;\n    console.log(Settings);\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const { category = defaulC, difficulty = defaulD, questions = defaultQ } = settings;\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}&token=${token}`)\n      .then((r) => r.json()).then((perguntas) => {\n        console.log(perguntas);\n        const invalidateToken = 3;\n        if (perguntas.response_code === invalidateToken) {\n          this.secRequest();\n        } else {\n          // console.log(perguntas);\n          this.setState({ perguntas, loading: false });\n        }\n      });\n  }\n\n  secRequest() {\n    const { getToken, settings } = this.props;\n    console.log(Settings);\n    const defaulC = '9';\n    const defaulD = 'easy';\n    const defaultQ = '5';\n    const { category = defaulC, difficulty = defaulD, questions = defaultQ } = settings;\n    getToken();\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=${questions}&category=${category}&difficulty=${difficulty}&token=${token}`)\n      .then((r) => r.json()).then((perguntas) => {\n        const invalidateToken = 3;\n        if (perguntas.response_code !== invalidateToken) {\n          this.setState({ perguntas, loading: false });\n        } else {\n          this.secRequest();\n        }\n      });\n  }\n\n  keepResp({ target }) {\n    const { innerText: resposta } = target;\n    const { perguntas: { results: perguntas } } = this.state;\n    const { timer, updateScore, index } = this.props;\n    if (perguntas[index].correct_answer === resposta) {\n      const { tempoRestante } = this.state;\n      console.log('input', resposta);\n      console.log('object', perguntas[index].correct_answer);\n      let coeficiente = 0;\n      const TRES = 3;\n      switch (perguntas[index].dificulty) {\n      case 'easy': coeficiente = 1;\n        break;\n      case 'medium': coeficiente = 2;\n        break;\n      case 'hard': coeficiente = TRES;\n        break;\n      default: coeficiente = 1;\n      }\n      const NUMBER_TEN = 10;\n      const score = NUMBER_TEN + (coeficiente * tempoRestante);\n      console.log(score);\n      updateScore(score);\n    }\n    this.setState({ isColor: true,\n      isButtonDisabled: false,\n      tempoRestante: timer }, () => {\n      const { updateIsRespDisabled } = this.props;\n      updateIsRespDisabled();\n    });\n  }\n\n  renderPerguntas() {\n    const { isColor,\n      perguntas,\n      isButtonDisabled,\n    } = this.state;\n    const { index, isRespDisabled } = this.props;\n    const {\n      category,\n      dificulty,\n      question,\n    } = perguntas.results[index];\n    const Alternativas = [perguntas.results[index].correct_answer,\n      ...perguntas.results[index].incorrect_answers];\n    const perguntasRand = shuffle(Alternativas);\n    return (\n      <div key={ dificulty }>\n        <p data-testid=\"question-category\">{ category }</p>\n        <p data-testid=\"question-text\">{ question }</p>\n        <div data-testid=\"answer-options\">\n          {perguntasRand.map((x, Index) => {\n            if (perguntas.results[index].correct_answer === x) {\n              return (\n                <button\n                  className={ isColor ? 'activeC' : 'desactive' }\n                  disabled={ isRespDisabled }\n                  onClick={ this.keepResp }\n                  type=\"button\"\n                  key={ Index }\n                  data-testid=\"correct-answer\"\n                >\n                  { x }\n                </button>);\n            }\n            return (\n              <button\n                className={ isColor ? 'activeW' : 'desactive' }\n                disabled={ isRespDisabled }\n                onClick={ this.keepResp }\n                type=\"button\"\n                key={ Index }\n                data-testid={ `wrong-answer${perguntasRand\n                  .length > 2 ? `-${Index}` : ''}` }\n              >\n                { x }\n              </button>);\n          })}\n          <button\n            style={ { display: isButtonDisabled ? 'none' : 'inline' } }\n            disabled={ isButtonDisabled }\n            onClick={ this.respondeu }\n            type=\"button\"\n            data-testid=\"btn-next\"\n          >\n            NEXT\n          </button>\n        </div>\n        <Timer isColor={ isColor } />\n      </div>\n    );\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div>\n        <Header />\n        <div>{ loading ? null : this.renderPerguntas() }</div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchApi()),\n  updateIndex: () => dispatch(update()),\n  updateIsRespDisabled: () => dispatch(updateButtons()),\n  updateScore: (score) => dispatch(scoreUpdate(score)),\n});\n\nconst mapStateToProps = (state) => ({\n  index: state.player.index,\n  isRespDisabled: state.player.isRespDisabled,\n  timer: state.player.timer,\n  name: state.player.name,\n  score: state.player.score,\n  url: state.player.url,\n  settings: state.player.settings,\n});\n\nTrivia.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  settings: PropTypes.shape({\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    questions: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  updateIndex: PropTypes.func.isRequired,\n  isRespDisabled: PropTypes.bool.isRequired,\n  updateIsRespDisabled: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n"]},"metadata":{},"sourceType":"module"}